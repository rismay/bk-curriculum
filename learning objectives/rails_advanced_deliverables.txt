SWBAT build a simple version of Rails by following rebuilding rails.

SWBAT refactor a view helper by implementing the "presenter" pattern using both a homegrown solution and using the Draper gem.

SWBAT remove logic from their controllers and into models, and PORO.

SWBAT refactor their code to comply with the law of demeter when it makes sense.

SWBAT describe why "fat model skinny controller" is a best practice.

SWBAT list the costs and benefits of building a sample application using inheritance vs composition.

SWBAT modularize their applications by refactoring groups of methods or behavoir into shared modules.

SWBAT process things aynchronously using CRON or a background processing gem such as resque.

SWBAT refactor "fat models" that voilate the SRP and describe why this is a best practice.

SWBAT write their own authentication logic from scatch by creating a sign up form, a sign in form, a way to hash the password and use has_secure_password and authenticate users and a way of keeping track of the current_user in the session. A filter should direct non signed in users to the sign up/sign in page.

SWBAT write their own authorization logic from scratch. There should be different types of users with different levels of privileges that all should be configurable from one class/method.  You should use a filter that calls an authorization method before any action and use that method to determine which actions a user is allowed to take and which elements show up in the HTML.

SWBAT use active record validations to implement business rules which require certain criteria be met when creating new instances of objects.

SWBAT use active record callbacks to implement business logic which needs to happen at different points in an objects life cycle for example before and after save send an email.

SWBAT implement HTTP caching as well as action and page caching to speed up a slow page.

SWBAT retrieve and store data from an external sources such as the Twitter API.

SWBAT authenicate with external services using oauth.

SWBAT build a simple webserver that listens for new connections parses HTTP and responds with static and dynamically generated HTML.

SWBAT refactor using a PORO in a rails controller or model to encapsulate logic that does not belong there.
