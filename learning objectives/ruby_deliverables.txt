##RUBY

### ENVIRONMENT

* rspec, guard, irb, ruby keyword, installation

SWBAT dynamically evaluate Ruby code in a REPL using irb.
SWBAT run ruby programs from the command line using the ruby executable.
SWBAT assign a value to a local variable.

Rubygems
SWBAT install ruby gems.
SWBAT find the source code for installed ruby gems.
SWBAT require gems in programs they are using or add them to a Gemfile.

Arrays and Hashes

SWBAT manipulate arrays including adding data, removing data, indexing into them, sorting them, determining if an element is in an array.
SWBAT add data, remove data, index into, and sort nested arrays.
SWBAT use hashes to do the following: add key value pairs, retrieve values using a key.

Enumerables(hashes and arrays)

SWBAT iterate over enumerable objects passing a block to the method to be called on each iteration.
SWBAT add elements to a collection whose scope persists after the end of the iteration.
SWBAT return an enumerable from one enumerable method and chain another enumerable immediately after.
SWBAT iterate over an enumerable doing something with each key and value that gets yielded (for example adding all values greater than 10 to an array)
SWBAT skip an iteration.
SWBAT break out of an iteration early.

Nested data structures

SWBAT iterate over one data structure that yields another enumerable object and iterate over those enumerable objects and applying supplying a block to the "inner loop" to be called on each step of the "inner loop".
SWBAT add/remove/replace elements in deeply nested data structures while keeping track of the scope introduced by the iterators.

Errors

SWBAT handle errors gracefully.
SWBAT determine which step of an iteration an error is happening on by rescuing exceptions.

Methods
SWBAT write resuable chunks of code which accept variable inputs and can be called aka methods.
SWBAT create methods with variable number of arguments.
SWBAT create methods with default values for arguments.
SWBAT implicitly return values from methods.
SWBAT explicity return values from methods.
SWBAT conditionally exit early from methods 
SWBAT understand method scope by only accessing variables that are passed into their method via its arguments.
SWBAT understand the difference between printing to the console and returning a value by assigning the return value of a function to a local variable and printing vs returning a variable in the method.
SWBAT follow the flow of execution by accurately describing the flow of a program that has methods that call multiple other methods.
SWBAT conditionally assign the value of a variable and return it.
SWBAT use = for assignment and == for testing equality.
SWBAT check to see if something is nothing || nil by calling the nil? method.
SWBAT use the || & && operator.
SWBAT chain methods by having the first method return an object that responds to the second next method called.

Literal Notation
SWBAT instantiate an instance of an array by writing []
SWBAT instantiate an instance of a string by writing ""
SWBAT instantiate an instance of a hash by writing {}

Objects

SWBAT write methods that belong to an object rather than the top level Ruby object.
SWBAT create a bare class.
SWBAT create a class with an instance method.
SWBAT recognize that everything in Ruby is an object
SWBAT call instance methods on an instance of a class.
SWBAT call class methods on a class.
SWBAT create an instance variable and assign it a value.
SWBAT create a class variable and assign it a value.
SWBAT instantiate a class.
SWBAT assign instance variables to the instance of the object in the initialize method and refer to them later.
SWBAT assign instances of other objects to instance variables.
SWBAT understand that there are classes that come with Ruby, and you can define your own, all follow the same rules.
SWBAT describe the reason to create a class.
SWBAT reopen and add methods to a class.
SWBAT create a program that defines two classes and "links" them together calling methods on one class from within another class.
SWBAT access a constant defined in a class nested in a module from another class.
SWBAT distinguish between the value of self depending on the context.
SWBAT create a class that inherits from another class.
SWBAT override an inherited method.
SWBAT call super with arguments in a "child" class.
SWBAT call super without arguments in a "child" class.

Modules
SWBAT create a module and include it into a class.
SWBAT create a module and extend it in another class.
SWBAT create both class and instance methods in a module.
SWBAT not instantiate modules.
SWBAT use a module for namespacing.



### PROGRAMMING BASICS, DATA STRUCTURES and ITERATION
* variables
* what does dynamic typing mean?
* arrays and hashes
* negotiating complex data structures

### METHODS
* methods + parameters + return values
* chaining
* control flow structures

### OBJECTS
* classes + objects + modules
* instance variables and methods
* class variables and constants
* inheritance

### RUBYGEMS
* rubygems - what are they
* oauth
* nokogiri

### PROGRAMMING STYLE AND BEST PRACTICES
* functional vs oo ruby
* object interfaces
* refactoring anti patterns
* metaprogramming (method_missing<- mention when talking about inheritance)
